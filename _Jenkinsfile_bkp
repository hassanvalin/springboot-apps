pipeline {
    agent {
        docker {
            image 'maven:3-alpine'                                   // Creating a docker image to run the job
            args '-v /opt/.m2:/var/lib/jenkins/workspace/test/.m2'   // Creating a volume that mounts from node to docker container
        }
    }
    
    
    tools {
        maven 'MAVEN_3.6.3' // The name 'MAVEN_3.6.3' should be configured in Jenkins global tools configuration before using here
    }
    
    
    // you can force your parallel stages to all be aborted when any one of them fails, by adding failFast true to the stage containing the parallel.
    // Another option for adding failfast is adding an option to the pipeline definition: parallelsAlwaysFailFast()
    
    options {
        parallelsAlwaysFailFast()
        buildDiscarder(logRotator(numToKeepStr: '10'))  // It keeps 10 builds
        timeout(time: 1, unit: 'HOURS')  // Pipeline gets timedout after 1 hour if it's continueing
        retry(3)  // If something fails ,pipeline gets retried 3 times
        //timestamps() // Prepend all console output generated by the Pipeline run with the time at which the line was emitted.
    }
    
    environment {
        myreg = 'Hello/reg'
        git_credentials = credentials('Git_Hub')
        azure_config = credentials('azure_kubeconfig')
    }
    
    parameters {
        string(name: 'PERSON', defaultValue: 'DAN', description: 'Give name of the person')
        text(name: 'ANYTEXT', defaultValue: '', description: 'Enter any text')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Enter True or False')
        choice(name: 'MYCHOICE', choices: ['Hello','Hi','How r u'], description: 'Select your choice')
        password(name: 'MYPWD', defaultValue: 'SECRET', description: 'Enter the password')
    }
    
    stages {
        
        stage('checkout') {
            steps {
                git branch: 'master',  credentialsId: 'Git_Hub', url: 'https://github.com/hassanvalin/Python_Practice'
            }
        }
        
        stage('Taking parameters') {
            steps {
                print("Hello, ${params.PERSON}")
                print("${params.ANYTEXT}")
                print("${TOGGLE}")
                print("My choice is: ${MYCHOICE}")
                print("My password is: ${MYPWD}")
            }
        }
        
        stage('Testing the tool'){
            steps {
                sh 'mvn --version'   // The mentioned maven version at tools section got auto-installed and available for us to use
            }
        }
        
        stage('Testing input Directive') {
            input {
                message "Should we continue ?"
                ok "Yes, we can proceed"
                submitter "John,Dan,David"
                parameters {
                    string(name: 'INPUT_PERSON', defaultValue: 'James', description: 'To whom we are greeting')
                }
            }
            options {
                timestamps()
            }
            steps {
                print("Hello, ${INPUT_PERSON}, How are you doing ?")
            }
        }
        
        stage('Testing When condition') {
            when {
                branch 'master'
            }
            steps {
                print("This step is being executed because the branch is master")
            }
        }
        
        stage('Sequentials and Parallel Stages') {
            stages {
                stage('Seq1') {
                    steps {
                        print("This is from Seq1 stage")
                    }
                }
                stage('Seq2') {
                    steps {
                        print("This is from seq2 stage")
                    }
                }
                stage("Parallel") {
                            //failFast true   //you can force your parallel stages to all be aborted when any one of them fails
                            parallel {
                                stage("Parallel1"){
                                    steps {
                                        print("This is from Parallel1")
                                    }
                                }
                                stage("Parallel2") {
                                    steps {
                                        print("This is from Parallel 2")
                                    }
                                }
                            }
                }
            }
        }
        stage('Testing Script block') {
            steps {
                echo "We are testing Script block here ..."
                
                script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
            }
        }
        stage('Testing Environment Variables') {
            steps {
                sh 'printenv'
                print("Git Credentials username is : $git_credentials_usr")
            }
        }
    }
}
