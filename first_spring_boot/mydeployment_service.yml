apiVersion: apps/v1             # Which version of the Kubernetes API youâ€™re using to create this object
kind: Deployment                # What kind of object you want to create
metadata:                       # Data that helps uniquely identify the object, including a name string, UID, and optional namespace
        name: myk8sdeployment
        namespace: ks-ns        # Created this namespace manually in cluster before using in yml file
        labels:
                app: myk8s_app
spec:                           # What state you desire for the object
        template:
                metadata:
                        labels:
                                app: myk8s_app1
                spec:
                    containers:
                        - name: my-java-app
                          image: hassandocker1/my_java_image:%%BUILD_NUMBER%%                
                    #       env:
                    #             - name: "AUTH_TOKEN"                   # You can login to the pod and echo $AUTH_TOKEN and see the value of the environment variable AUTH_TOKEN
                    #               valueFrom:
                    #                 secretKeyRef:
                    #                     name: my-username2      # screte name my-username2 has been created with the key username using command 'kubectl create secret generic my-username2 --from-literal=username=myadmin -n ks-ns' before referencing here and it has been assigned to the environment variable 'AUTH_TOKEN' that can be used in container
                    #                     key: username
                    #       volumeMounts:              
                    #             - name: service-key
                    #               mountPath: /app/properties      # volume with the name service-key has been created below and referencing here under the path /app/properties inside container
                    #             - name: service-key-literal
                    #               mountPath: /app/props
                    #             - name: db-details
                    #               mountPath: /app/db-details-props        
                    # volumes:
                    #     - name: service-key
                    #       secret:
                    #         secretName: my-username1               # my-username1 secret has been created using 'kubectl create secret generic my-username1 --from-file=./username.txt -n ks-ns' before referencing here
                    #     - name: service-key-literal
                    #       secret:
                    #               secretName: my-username2      # my-username2 secret has been created using 'kubectl create secret generic my-username2 --from-literal=username=myadmin -n ks-ns' before referencing here
                    #     - name: db-details
                    #       secret:
                    #              secretName: db-details        # db-details secret has been created using 'kubectl create secret generic db-details --from-literal=username=admin --from-literal=password=admin1 -n ks-ns' before referencing here  
        selector:
                matchLabels:
                        app: myk8s_app1


---
                        
apiVersion: v1
kind: Service
metadata:
        name: myk8service
        namespace: ks-ns
        labels:
                app: myk8s_svc
spec:
        selector:
                app: myk8s_app1                     # It tells any POD with this name
        ports:
                - name: http                        # For some services, you need to expose more than one port. When using multiple ports for a service, you must give all of your ports names so that these are unambiguous.
                  port: 80   #Exposing to the user
                  targetPort: 8080  #From the container
        type: LoadBalancer          

# A Service can map any incoming port to a targetPort
